装逼大法：
一、利用位运算进行两个变量的数值交换
#include <iostream>
using namespace std;
int main(){
    int x , y ;
    cin >> x >> y ;
    cout << "交换前："  << endl ;
    cout << "x=" << x << " " << "y=" << y << endl ; 
    x = x ^ y ;
    y = x ^ y ;
    x = x ^ y ;
    cout << "交换后："  << endl ;
    cout << "x=" << x << " " << "y=" << y << endl ;
    return 0 ;
}
//我们知道，两个相同的数异或之后结果会等于 0，即 n ^ n = 0。
并且任何数与 0 异或等于它本身，即 n ^ 0 = n。所以，解释如下：
把（1）中的 x 带入 （2）中的 x，有
y = x^y = (x^y)^y = x^(y^y) = x^0 = x。 
x 的值成功赋给了 y。
对于（3）,推导如下：
x = x^y = (x^y)^x = (x^x)^y = 0^y = y。
（异或运算支持运算的交换律和结合律哦）
【两个相同的数异或的结果是 0，一个数和 0 异或的结果是它本身】
-----------------------------------------------------------------------
二、判断奇偶数
//C++ 二进制位运算判断奇数偶数,二进制取位操作,取二进制末位
#include<iostream>
using namespace std;
int main()
{
	int i;
	for(i=0;i<100;++i)
	{
		if(1==(i&1))
			cout<<i<<"是奇数"<<endl;
		else
			cout<<i<<"是偶数"<<endl;
	}
}

/*--
例如一个数 N,(N&1)的结果就是取二进制的最末位。
这可以用来判断一个整数的奇偶，
二进制的最末位为0表示该数为偶数，
最末位为1表示该数为奇数.
这是因为二进制数末位的权值为2的0次方等于1,
其他位置上则为2的非0整数次方,使其权值不会产生奇数
--*

//int m = a >> b ;相当于int m = a * pow( 2 , - b ) ;
//int m = a << b ;相当于int m = a * pow( 2 , b ) ;
------------------------------------------------------------------------------------------------------
三、求两个整数的平均值
int getAverage(int x, int y){
        return (x + y) >> 1;
｝
另一种写法
int getAverage(int x, int y){
        return ((x ^ y) >> 1) + (x & y); 
     /*(x^y) >> 1得到x，y其中一个为1的位并除以2，
       x&y得到x，y都为1的部分，加一起就是平均数了*/
 
} 
--------------------------------------------------------------------------------------------------------
四、判断符号是否相同
boolean isSameSign(int x, int y){ //有0的情况例外
	return (x ^ y) >= 0; // true 表示 x和y有相同的符号， false表示x，y有相反的符号。
}
---------------------------------------------------------------------------------------------------------
计算n+1
-~n
计算n-1
~-n
取相反数
~n + 1;
另一种写法
(n ^ -1) + 1;
如果计算如下运算：
if(x == a) x = b; if(x == b) x = a;
x = a ^ b ^ x;
===========================================================
五、位运算（按位与、按位或、异或）
按位与运算符（&）
参加运算的两个数，按二进制位进行“与”运算。
运算规则：只有两个数的二进制同时为1，结果才为1，否则为0。（负数按补码形式参加按位与运算）
例：3 &5  即 00000011 & 00000101 = 00000001 ，所以 3 & 5的值为1。
按位或运算符（|）
运算规则：参加运算的两个数只要两个数中的一个为1，结果就为1。
即  0 | 0= 0 ,  1 | 0= 1  ， 0 | 1= 1  ,  1 | 1= 1 。
例：2 | 4 即 00000010 | 00000100 = 00000110 ，所以2 | 4的值为 6 。
异或运算符（^）
运算规则：参加运算的两个数，如果两个相应位为“异”（值不同），则该位结果为1，否则为0。
即 0 ^ 0=0  ， 0 ^ 1= 1  ， 1 ^ 0= 1  ， 1 ^ 1= 0 。
例： 2 ^ 4 即 00000010 ^ 00000100 =00000110 ，所以 2 ^ 4 的值为6 。
------------------------------------------------------------------------------------------------------------
